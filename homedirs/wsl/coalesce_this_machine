#!/usr/bin/env bash

set -e
set -u

# from https://stackoverflow.com/a/246128
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
LIB_DIR="${DIR}/../common/lib"

source "${LIB_DIR}/install_gum.bash"
source "${LIB_DIR}/install_git_duet.bash"
source "${LIB_DIR}/install_alacritty_colorscheme.bash"
source "${LIB_DIR}/setup_neovim.bash"

main() {
  configure_wsl
  configure_dns
  symlink_all_the_things
  install_os_packages
  default_to_zsh
  configure_ansible
  setup_neovim
  install_os_pip_packages
  install_all_things_docker
  install_terraform
  install_gum "0.8.0"
  install_git_duet "0.9.0"
  install_delta "0.14.0"
  install_1password_cli "2.7.2"
  install_golang "1.19.2"
  install_alacritty_colorscheme "1.0.1"
}

configure_wsl() {
  cat << EOF | sudo tee /etc/wsl.conf
# generated by wsl/coalesce_this_machine
# https://learn.microsoft.com/en-us/windows/wsl/wsl-config

[network]
hostname = wsl
generateHosts = false
generateResolvConf = false
EOF
}

configure_dns() {
  # Delete the symlink created by WSL
  if [[ -L /etc/resolv.conf ]]; then
    sudo rm -f /etc/resolv.conf
  fi
  cat << EOF | sudo tee /etc/resolv.conf
# generated by wsl/coalesce_this_machine
nameserver 192.168.2.10
search home.scottmuc.com
EOF
}


install_golang() {
  local version

  version="${1:-1.19}"
  if [[ ! -d ../../vendor/go ]]; then
    curl -L "https://go.dev/dl/go${version}.linux-amd64.tar.gz" | \
      tar -C ../../vendor -zxvf -
  fi
}


# Needed for USB mounting for the PI
configure_ansible() {
  ansible-galaxy collection install ansible.posix
}

install_delta() {
  local version

  version="${1:-0.12.1}"

  if command -v delta &> /dev/null; then
    echo "git-delta exists: $(delta --version)"
    return
  fi

  local deb="git-delta_${version}_amd64.deb"
  curl -LsS -o "/tmp/${deb}" \
    "https://github.com/dandavison/delta/releases/download/${version}/${deb}"
  sudo dpkg -i "/tmp/${deb}"
}

install_all_things_docker() {
  if command -v docker &> /dev/null; then
    echo "docker exists: $(docker -v)"
    return
  fi

  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  sudo add-apt-repository \
     "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
     $(lsb_release -cs) \
     stable"
  sudo apt-get update
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io
  # https://patrickwu.space/2021/03/09/wsl-solution-to-native-docker-daemon-not-starting/
  sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
  sudo service docker start
  sudo usermod -a -G docker wsl
}

install_terraform() {
  if command -v terraform &> /dev/null; then
    echo "terraform exists: $(terraform -v)"
    return
  fi

  curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
  sudo apt-add-repository \
    "deb [arch=amd64] https://apt.releases.hashicorp.com \
    $(lsb_release -cs) \
    main"

  sudo apt-get update
  sudo apt-get install terraform
}

# depends on zsh being install of course
default_to_zsh() {
  if ! echo $SHELL | grep zsh > /dev/null; then
    chsh -s $(which zsh)
  fi
}

install_os_packages() {
  sudo apt-get update
  sudo apt-get install -y \
    ansible               \
    autojump              \
    git-crypt             \
    gnupg                 \
    graphviz              \
    jq                    \
    myrepos               \
    neovim                \
    python3               \
    python3-virtualenv    \
    python3-pip           \
    unzip                 \
    zsh
}

install_os_pip_packages() {
  pip install diagrams
}

# https://developer.1password.com/docs/cli/install-server
install_1password_cli() {
  local version
  # bash shenanigans... use specified version, if none specified, default to 2.0.0
  version="${1:-2.0.0}"
  if command -v op &> /dev/null; then
    echo "op exists: $(op --version)"
    return
  fi

  curl -sSfo op.zip \
    "https://cache.agilebits.com/dist/1P/op2/pkg/v${version}/op_linux_amd64_v${version}.zip" \
    && unzip -od ../../vendor/bin op.zip \
    && rm op.zip
}


# I am getting the absolute path so that ls -la output goes from:
#
#   .config -> /Users/spring/workspace/infrastructure/homedirs/osx/bin/../dotfiles/dot.config
# to
#   .config -> /Users/spring/workspace/infrastructure/homedirs/osx/dotfiles/dot.config
symlink_all_the_things() {
  local homedir_source=$(cd "${DIR}/"; pwd)
  local common_source=$(cd "${DIR}/../common"; pwd)
  local dotfiles_dir="${homedir_source}/dotfiles"
  local common_dotfiles_dir="${common_source}/dotfiles"

  # I don't know how to do this command in a 1 line indempotent way. Repeated executions
  # but symlinks within the symlink.
  if [[ ! -d ~/.config ]]; then
    mkdir ~/.config
  fi

  if [[ ! -d ~/.gnupg ]]; then
    mkdir ~/.gnupg
    chmod 700 ~/.gnupg
  fi
  ln -sfv "${common_dotfiles_dir}/dot.gnupg/gpg-agent.conf" ~/.gnupg/gpg-agent.conf

  ln -sfv "${common_dotfiles_dir}/dot.githelpers" ~/.githelpers
  ln -sfv "${common_dotfiles_dir}/dot.tmux.conf" ~/.tmux.conf
  ln -sfv "${common_dotfiles_dir}/dot.gitconfig" ~/.gitconfig
  ln -sfv "${common_dotfiles_dir}/dot.git-authors" ~/.git-authors
  ln -sfv "${common_dotfiles_dir}/dot.mrconfig" ~/.mrconfig

  # https://unix.stackexchange.com/a/355220
  ln -sTfv "${common_dotfiles_dir}/dot.config/nvim" ~/.config/nvim
  ln -sTfv "${common_dotfiles_dir}/dot.config/alacritty.wsl" ~/.config/alacritty

  ln -sfv "${dotfiles_dir}/dot.zshrc" ~/.zshrc
}

main
