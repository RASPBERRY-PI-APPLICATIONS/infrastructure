#!/usr/bin/env bash

set -e
set -o pipefail

main() {
  case "$1" in
    backup)
      shift
      backup_command "$@"
      ;;
    restore)
      shift
      restore_command "$@"
      ;;
    *)
      print_usage_and_exit
      ;;
  esac
}

backup_command() {
  local email=""

  while getopts ":e:" opt; do
    case $opt in
      e) email="$OPTARG"
      ;;
      \?) print_usage_and_exit
      ;;
    esac
  done

  backup "${email}"
}

restore_command() {
  local email=""

  while getopts ":e:" opt; do
    case $opt in
      e) email="$OPTARG"
      ;;
      \?) print_usage_and_exit
      ;;
    esac
  done

  restore "${email}"
}

backup() {
  local email="$1"
  local secret_key="$(gpg -a --export-secret-keys "${email}")"
  local public_key="$(gpg -a --export "${email}")"
  local ownertrust="$(gpg -a --export-ownertrust)"

  IFS='' read -r -d '' credential_json <<JSON ||
{
  "notesPlain": "generated by \`gpg_op\` \n\n

source: https://github.com/scottmuc/infrastructure/blob/master/homedirs/osx/bin/gpg_op
",
  "sections": [
    {
      "name": "fields",
      "fields": [
        {
          "n": "base64.secret.key",
          "k": "concealed",
          "t": "base64.secret.key",
          "v": "$(echo ${secret_key} | base64)"
        },
        {
          "n": "base64.public.key",
          "k": "concealed",
          "t": "base64.public.key",
          "v": "$(echo ${public_key} | base64)"
        },
        {
          "n": "base64.ownertrust",
          "k": "concealed",
          "t": "base64.ownertrust",
          "v": "$(echo "${ownertrust}" | base64)"
        }
      ]
    }
  ]
}
JSON
  true

  encoded_json=$(echo ${credential_json} | op encode)

  op create item "Secure Note" "${encoded_json}" \
    --title="gpg.${email}" \
    --vault="Automation"
}

restore() {
  local email="$1"

  # base64 uses different flags for decoding between Linux and Darwin. Since I'm not going single OS
  # anytime soon, I'll define the base64 decode command dependent on the OSTYPE
  # ref: https://stackoverflow.com/questions/394230/how-to-detect-the-os-from-a-bash-script
  local base64_decode_cmd=""
  case $OSTYPE in
    darwin*) base64_decode_cmd="base64 -D" ;;
    linux*)  base64_decode_cmd="base64 -d" ;;
    \?) print_usage_and_exit
    ;;
  esac

  local secretkey="$(easy-op show -n "gpg.${email}" -f "base64.secret.key" | $base64_decode_cmd)"
  local ownertrust="$(easy-op show -n "gpg.${email}" -f "base64.ownertrust" | $base64_decode_cmd)"

  gpg --import <(echo -e "${secretkey}")
  gpg --import-ownertrust <(echo -e "${ownertrust}")
}

print_usage_and_exit() {
  cat <<USAGE
usage: $0 <command>

Commands:
 - backup
     stores the keys for the specified e-mail in a Secure Note

     -e      e-mail address (required)

 - restore
     imports keys from a Secure Note into a local gpg installation

     -e      e-mail address (required)

USAGE

  exit 1
}

main "$@"
