#!/usr/bin/env bash

set -eu
set -o pipefail

[[ -z "${DEBUG:-}" ]] || set -x

main() {
  local secret_title
  local encoded_json
  local ssh_key_passphrase
  local private_key
  local public_key
  local temp_dir
  local github_token
  secret_title="${1:-}"

  if [[ -z "${secret_title}" || "${secret_title}" = "-h" ]]; then
    print_usage_and_exit
  fi

  log_into_1password

  ssh_key_passphrase="$(xkcd-password-generator)"
  temp_dir=$(mktemp -d -t tmp.XXXXXXXXXX)
  trap "cleanup ${temp_dir}" EXIT
  ssh-keygen -t rsa -b 2048 -C "${secret_title}" -f "${temp_dir}/id_rsa" -N "${ssh_key_passphrase}"
  private_key=$(jq -n --arg key "$(cat ${temp_dir}/id_rsa)" '{ test: $key }' | jq .test | tr  -d '"')
  public_key=$(cat ${temp_dir}/id_rsa.pub)

  github_token=$(op read op://Automation/github-ssh-key-rotator/token)

  curl https://api.github.com/user/keys \
    -X POST \
    -H "Authorization: token ${github_token}" \
    -d "{ \"title\": \"${secret_title}\", \"key\": \"${public_key}\" }"

  IFS='' read -r -d '' credential_json <<JSON ||
{
  "fields": [
    {
      "id": "disk encryption passphrase",
      "type": "concealed",
      "label": "disk encryption passphrase",
      "value": "$(xkcd-password-generator)"
    },
    {
      "id": "machine password",
      "type": "concealed",
      "label": "machine password",
      "value": "$(xkcd-password-generator 3)"
    },
    {
      "id": "base64 encoded ssh private key",
      "type": "concealed",
      "label": "base64 encoded ssh private key",
      "value": "$(echo "${private_key}" | base64)"
    },
    {
      "id": "ssh key passphrase",
      "type": "concealed",
      "label": "ssh key passphrase",
      "value": "${ssh_key_passphrase}"
    },
    {
      "id": "notesPlain",
      "type": "STRING",
      "purpose": "NOTES",
      "label": "notesPlain",
      "value": "generated by \`create-repave-secrets\` \n\n

source: https://github.com/scottmuc/infrastructure/blob/main/homedirs/common/bin/create-repave-secrets
"
    }
  ]
}
JSON
  true

  op item create \
    --category="Secure Note" \
    --vault="Automation" \
    --title="${secret_title}" \
    --template=<(echo ${credential_json}) 2>/dev/null
}

print_usage_and_exit() {
  cat <<HELP
usage: $0 <name of credential>

Generates the following:

  - 2048 bit RSA key protected with a passphrase
  - machine passphrase
  - disk encryption passphrase

The private key, and all the passphrases will be stored in a 1Password
"Secure Note" with the name provided.

The public key will be uploaded to GitHub as well with the name provided.

HELP

  exit 1
}

log_into_1password() {
  eval $(op signin)
}

cleanup() {
  dir_to_cleanup="$1"

  if [[ -d "${dir_to_cleanup}" ]]; then
    rm -rf "${dir_to_cleanup}"
  fi
}

main "$@"
